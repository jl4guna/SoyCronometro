---
import 'toastify-js/src/toastify.css';

import Layout from '../layouts/Layout.astro';
import Logo from '../components/Logo.astro';
import FloatingButtons from '../components/FloatingButtons.astro';
import SessionSelect from '../components/SessionSelect.astro';
import IncreaseTimeButtons from '../components/IncreaseTimeButtons.astro';
import Displays from '../components/Displays.astro';
import DecreaseTimeButtons from '../components/DecreaseTimeButtons.astro';
import ActionButtons from '../components/ActionButtons.astro';
import TimeInputs from '../components/TimeInputs.astro';
import Footer from '../components/Footer.astro';
---

<Layout title='SoyCronÃ³metro'>
  <main class='flex flex-col items-center h-screen'>
    <FloatingButtons />
    <Logo />

    <SessionSelect />

    <div class='text-center mt-8 flex flex-col items-center'>
      <IncreaseTimeButtons />
      <Displays />
      <DecreaseTimeButtons />
      <ActionButtons />
      <TimeInputs />
    </div>
    <Footer />
  </main>

  <!-- FIA PENALTY TOAST -->
  <div id='penalty-toast' class='-my-3 -mx-4 flex items-center hidden'>
    <img src='/imgs/fia.png' alt='Penalty' class='w-12 h-8 mr-2 ml-2' />
    <div class='bg-white h-full flex flex-col gap-0 p-2'>
      <p
        id='penalty-name'
        class='text-md font-[Titillium Web] italic text-[#003063]'
      >
        Esteban
      </p>
      <p
        id='penalty-lastname'
        class='text-3xl font-[Titillium Web] italic text-[#003063]'
      >
        Ocon
      </p>
    </div>
    <p class='text-xl p-2 text-white font-[Titillium Web] italic'>
      <span id='penalty-time' class='text-2xl'>+10 </span>
      <span id='penalty-unit'>SECONDS</span>
    </p>
  </div>
</Layout>

<script>
  import Toastify from 'toastify-js';

  const ONE_HOUR = 3600000;
  const ONE_MINUTE = 60000;
  const ONE_SECOND = 1000;
  const F1_SESSIONS = {
    FP: ONE_HOUR,
    Q1: 18 * ONE_MINUTE,
    Q2: 15 * ONE_MINUTE,
    Q3: 12 * ONE_MINUTE,
    SQ1: 12 * ONE_MINUTE,
    SQ2: 10 * ONE_MINUTE,
    SQ3: 8 * ONE_MINUTE,
    R: 2 * ONE_HOUR,
    T: 4 * ONE_HOUR,
  };

  let startTime = 0;
  let elapsedTime = ONE_HOUR;
  let timerInterval: number;
  let running = false;
  let countdownMode = true;

  // Selectors
  const startButton = document.getElementById('start') as HTMLButtonElement;
  const resetButton = document.getElementById('reset') as HTMLButtonElement;
  const stopButton = document.getElementById('stop') as HTMLButtonElement;
  const continueButton = document.getElementById(
    'continue'
  ) as HTMLButtonElement;
  const setCountdownButton = document.getElementById(
    'setCountdown'
  ) as HTMLButtonElement;
  const increaseTimeSecondsButton = document.getElementById(
    'increaseTimeSeconds'
  ) as HTMLButtonElement;
  const decreaseTimeSecondsButton = document.getElementById(
    'decreaseTimeSeconds'
  ) as HTMLButtonElement;
  const increaseTimeMinutesButton = document.getElementById(
    'increaseTimeMinutes'
  ) as HTMLButtonElement;
  const decreaseTimeMinutesButton = document.getElementById(
    'decreaseTimeMinutes'
  ) as HTMLButtonElement;
  const increaseTimeHoursButton = document.getElementById(
    'increaseTimeHours'
  ) as HTMLButtonElement;
  const decreaseTimeHoursButton = document.getElementById(
    'decreaseTimeHours'
  ) as HTMLButtonElement;
  const sessionSelector = document.getElementById(
    'sesion-selector'
  ) as HTMLSelectElement;
  const countDownHoursInput = document.getElementById(
    'countdownHours'
  ) as HTMLInputElement;
  const countDownMinutesInput = document.getElementById(
    'countdownMinutes'
  ) as HTMLInputElement;
  const countDownSecondsInput = document.getElementById(
    'countdownSeconds'
  ) as HTMLInputElement;
  const display = document.getElementById('display') as HTMLElement;
  const displayTimeContainer = document.getElementById(
    'display-time'
  ) as HTMLElement;
  const displayTyresContainer = document.getElementById(
    'display-tyres'
  ) as HTMLElement;
  const countdownErrors = document.getElementById(
    'countdownErrors'
  ) as HTMLElement;

  function timeToString(time: number) {
    const diffInHrs = time / ONE_HOUR;
    const hh = Math.floor(diffInHrs);

    const diffInMin = (diffInHrs - hh) * 60;
    const mm = Math.floor(diffInMin);

    const diffInSec = (diffInMin - mm) * 60;
    const ss = Math.floor(diffInSec);

    disableAddAndSubtractButtons(hh, mm, ss);

    const diffInMs = (diffInSec - ss) * 1000;
    const ms = Math.floor(diffInMs);

    const formattedHH = hh.toString().padStart(2, '0');
    const formattedMM = mm.toString().padStart(2, '0');
    const formattedSS = ss.toString().padStart(2, '0');
    const formattedMS = ms.toString().padStart(3, '0');

    return `${formattedHH} : ${formattedMM} : ${formattedSS} <span id='display-time-ml' style="-webkit-text-stroke: 0; font-family: Roboto;" class="!absolute top-4 right-6 text-sm">${formattedMS}</span>`;
  }

  function disableButton(disable: boolean, button: HTMLButtonElement) {
    button.disabled = disable;
  }

  function toggleClass(element: HTMLElement, className: string, add: boolean) {
    if (add) {
      element.classList.add(className);
    } else {
      element.classList.remove(className);
    }
  }

  function showAndHideElements(
    showList: HTMLElement[],
    hideList: HTMLElement[]
  ) {
    showList.forEach((element) => {
      toggleClass(element, 'hidden', false);
      toggleClass(element, 'flex', true);
    });

    hideList.forEach((element) => {
      toggleClass(element, 'hidden', true);
      toggleClass(element, 'flex', false);
    });
  }

  function disableAddAndSubtractButtons(hh: number, mm: number, ss: number) {
    disableButton(hh === 0 || running, decreaseTimeHoursButton);
    disableButton((hh === 0 && mm === 0) || running, decreaseTimeMinutesButton);
    disableButton(
      (hh === 0 && mm === 0 && ss === 0) || running,
      decreaseTimeSecondsButton
    );
  }

  function print(txt: string) {
    if (display) display.innerHTML = txt;
  }

  function start() {
    startTime = countdownMode
      ? performance.now() + elapsedTime
      : performance.now() - elapsedTime;
    timerInterval = requestAnimationFrame(updateTimer);

    changeDisableAddAndSubtractButtons();
    setCountdownButton.disabled = true;

    showAndHideElements(
      [stopButton],
      [startButton, resetButton, continueButton]
    );

    running = true;
  }

  function changeDisableAddAndSubtractButtons(disable = true) {
    let buttons = document.querySelectorAll(
      '.add-subtract-button'
    ) as NodeListOf<HTMLButtonElement>;
    buttons.forEach((button) => {
      button.disabled = disable;
    });
  }

  function stop() {
    elapsedTime = countdownMode
      ? startTime - performance.now()
      : performance.now() - startTime;
    cancelAnimationFrame(timerInterval);
    changeDisableAddAndSubtractButtons(false);
    setCountdownButton.disabled = false;
    running = false;

    showAndHideElements([resetButton, continueButton], [stopButton]);
  }

  function reset() {
    cancelAnimationFrame(timerInterval);
    elapsedTime = getSessionTime(
      sessionSelector.value as keyof typeof F1_SESSIONS
    );
    print(timeToString(elapsedTime));
    running = false;
    changeDisableAddAndSubtractButtons(false);
    setCountdownButton.disabled = false;
    showAndHideElements(
      [startButton, displayTimeContainer],
      [stopButton, resetButton, continueButton, displayTyresContainer]
    );
  }

  function updateTimer() {
    let now = performance.now();
    let timeElapsed = countdownMode ? startTime - now : now - startTime;
    elapsedTime = Math.max(0, timeElapsed);
    print(timeToString(elapsedTime));
    if (elapsedTime > 0) {
      timerInterval = requestAnimationFrame(updateTimer);
    } else if (countdownMode) {
      showTyres();
      stop();
      continueButton.classList.add('hidden');
      continueButton.classList.remove('flex');
      changeDisableAddAndSubtractButtons(true);
    }
  }

  function showTyres(show = true) {
    if (!show) {
      showAndHideElements([displayTimeContainer], [displayTyresContainer]);
      return;
    }
    showAndHideElements([displayTyresContainer], [displayTimeContainer]);
  }

  function validateInput(input: HTMLInputElement, min: number, max: number) {
    let value = parseInt(input.value);
    if (isNaN(value) || value < min || value > max) {
      input.classList.add('border-rojo');
      input.classList.remove('border-gris');
      return {
        valid: false,
        value,
      };
    }
    input.classList.remove('border-rojo');
    input.classList.add('border-gris');
    return {
      valid: true,
      value,
    };
  }

  function parseValues() {
    const hours = validateInput(countDownHoursInput, 0, 100);
    const minutes = validateInput(countDownMinutesInput, 0, 59);
    const seconds = validateInput(countDownSecondsInput, 0, 59);
    return { hours, minutes, seconds };
  }

  function setCountdownTime() {
    const { hours, minutes, seconds } = parseValues();

    if (!hours.valid || !minutes.valid || !seconds.valid) {
      countdownErrors.classList.remove('hidden');
      return;
    }

    countdownErrors.classList.add('hidden');

    elapsedTime =
      (hours.value * 3600 + minutes.value * 60 + seconds.value) * 1000;
    print(timeToString(elapsedTime));
    countdownMode = true;
  }

  // Event listeners
  startButton.addEventListener('click', start);
  continueButton.addEventListener('click', start);
  stopButton.addEventListener('click', stop);
  resetButton.addEventListener('click', reset);
  setCountdownButton.addEventListener('click', () => {
    reset();
    setCountdownTime();
  });
  increaseTimeSecondsButton.addEventListener('click', addSecond);
  decreaseTimeSecondsButton.addEventListener('click', subtractSecond);
  increaseTimeMinutesButton.addEventListener('click', addMinute);
  decreaseTimeMinutesButton.addEventListener('click', subtractMinute);
  increaseTimeHoursButton.addEventListener('click', addHour);
  decreaseTimeHoursButton.addEventListener('click', subtractHour);

  sessionSelector.addEventListener('change', (e) => {
    const selectedValue = e.target as HTMLSelectElement;
    changeSession(selectedValue.value as keyof typeof F1_SESSIONS);
  });

  function changeSession(selectedValue: keyof typeof F1_SESSIONS) {
    running = false;
    elapsedTime = getSessionTime(selectedValue);
    print(timeToString(elapsedTime));
  }

  function getSessionTime(selectedValue: keyof typeof F1_SESSIONS) {
    let time = elapsedTime;
    if (selectedValue) {
      time = F1_SESSIONS[selectedValue] || ONE_HOUR;
    }
    return time;
  }

  function prepareToast() {
    const DRIVERS = [
      { name: 'Esteban', lastname: 'Ocon' },
      { name: 'Fernando', lastname: 'Alonso' },
      { name: 'Sergio', lastname: 'Perez' },
      { name: 'Carlos', lastname: 'Sainz' },
      { name: 'Kevin', lastname: 'Magnusen' },
      { name: 'Logan', lastname: 'Sargeant' },
    ];

    const PENALTY_TIMES = [3, 5, 10, 15, 20, 30];

    const randomDriver = DRIVERS[Math.floor(Math.random() * DRIVERS.length)];
    const randomTime =
      PENALTY_TIMES[Math.floor(Math.random() * PENALTY_TIMES.length)];
    const toastNode = document
      .getElementById('penalty-toast')
      ?.cloneNode(true) as HTMLElement;

    if (randomDriver.name === 'Logan') {
      toastNode.querySelector('#penalty-name')!.textContent = randomDriver.name;
      toastNode.querySelector('#penalty-lastname')!.textContent =
        randomDriver.lastname;
      toastNode.querySelector('#penalty-time')!.textContent = `-1`;
      toastNode.querySelector('#penalty-unit')!.textContent = 'CHASSIS';
    } else {
      toastNode.querySelector('#penalty-name')!.textContent = randomDriver.name;
      toastNode.querySelector('#penalty-lastname')!.textContent =
        randomDriver.lastname;
      toastNode.querySelector('#penalty-time')!.textContent = `+${randomTime}`;
    }

    toastNode.classList.remove('hidden');

    Toastify({
      text: 'This is a toast',
      duration: 2000,
      className: 'penalty',
      node: toastNode,
      gravity: 'bottom', // `top` or `bottom`
      position: 'right', // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: '#003063',
      },
    }).showToast();
  }

  // Functions for listeners
  function addSecond() {
    elapsedTime += ONE_SECOND + 1;
    prepareToast();
    print(timeToString(elapsedTime));
  }

  function subtractSecond() {
    elapsedTime = Math.max(0, elapsedTime - ONE_SECOND);
    print(timeToString(elapsedTime));
  }

  function addMinute() {
    elapsedTime += ONE_MINUTE + 1;
    print(timeToString(elapsedTime));
  }

  function subtractMinute() {
    elapsedTime = Math.max(0, elapsedTime - ONE_MINUTE);
    print(timeToString(elapsedTime));
  }

  function addHour() {
    elapsedTime += ONE_HOUR + 1;
    print(timeToString(elapsedTime));
  }

  function subtractHour() {
    elapsedTime = Math.max(0, elapsedTime - ONE_HOUR);
    print(timeToString(elapsedTime));
  }

  // Add on click for elements with class toggleTheme
  document.querySelectorAll('.toggleTheme').forEach((el) => {
    el.addEventListener('click', toggleTheme);
  });

  function toggleTheme() {
    document.getElementsByTagName('html')[0].classList.toggle('dark');
  }
</script>
